#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'guard'
require 'fileutils'
require 'sass'
require 'haml/html'

class GuardBoilerPlate < Thor
  include Thor::Actions

  desc "start", "Starts a guard process for development"
  def start
    unless File.exists?(File.expand_path(File.join(Dir::pwd, 'Guardfile')))
      say "\nYou don't have a Guardfile in this directory, let's make it!", :green
      invoke :init
    end
    load File.join(Gem.loaded_specs['guard'].full_gem_path, 'bin', 'guard')
  end

  desc "init", "Generates a Guardfile in the current working directory"
  def init
    copy_file( File.join(%w{templates Guardfile}), "Guardfile")
    copy_file( File.join(%w{README.md}), "HOWTOUSE.md")
  end

  desc "sassify", "Migrates CSS files to SCSS files"
  def sassify
    if File.directory? "sass"
      say "\nA sass/ directory already exists, so skipping\n", :red
    else
      say "Copying CSS files to SCSS...", :green
      FileUtils.mkdir_p "sass", :verbose => true
      Dir["css/**/*.css"].each do |css_file|
        scss_file = css_file.sub(/^css/, 'sass').sub(/\.css$/, '.scss')
        FileUtils.mkdir_p(File.dirname(scss_file))
        FileUtils.cp css_file, scss_file, :verbose => true
        say "Generated #{scss_file} from #{css_file} (straight copy)", :green
      end
    end
  end

  desc "hamlize", "Migrates your HTML files to Haml files"
  def hamlize
    if File.directory? "haml"
      say "\nA haml/ directory already exists, so skipping\n", :red
    else
      say "Converting HTML files to Haml...", :green
      FileUtils.mkdir_p "haml", :verbose => true
      Dir["**/*.html"].each { |html_file| html_to_haml(html_file) }
    end
  end

  def self.source_root
    File.expand_path(File.join(File.dirname(__FILE__), '..'))
  end

  private

  def html_to_haml(html_file)
    haml_file = File.join('haml', html_file.sub(/\.html?$/, '.haml'))

    template = File.open(html_file, 'rb') { |f| f.read }
    output = Haml::HTML.new(template).render
    FileUtils.mkdir_p(File.dirname(haml_file))
    File.open(haml_file, 'w') {|f| f.write(output) }
    say "Generated #{haml_file} from #{html_file}", :green
  end
end

GuardBoilerPlate.start
